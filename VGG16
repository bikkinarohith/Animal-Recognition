{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VGG16Original","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BVEOD4SQLzwC","executionInfo":{"status":"ok","timestamp":1607477384082,"user_tz":300,"elapsed":18488,"user":{"displayName":"bikkina rohith","photoUrl":"","userId":"00040099719680836834"}},"outputId":"491f67f8-1f59-458f-c300-bd04114f6b0a"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5ZlSOzDYL7gJ"},"source":["import keras,os\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, MaxPool2D , Flatten\n","from keras.preprocessing.image import ImageDataGenerator\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zSIZf8xoMJa-","executionInfo":{"status":"ok","timestamp":1607477466919,"user_tz":300,"elapsed":441,"user":{"displayName":"bikkina rohith","photoUrl":"","userId":"00040099719680836834"}},"outputId":"8abed8f5-923a-4483-a502-a192f5a99756"},"source":["trdata = ImageDataGenerator()\n","traindata = trdata.flow_from_directory(directory=\"/content/drive/MyDrive/Resized Google Colab/Train\",target_size=(224,224))\n","tsdata = ImageDataGenerator()\n","testdata = tsdata.flow_from_directory(directory=\"/content/drive/MyDrive/Resized Google Colab/Test\",target_size=(224,224))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found 822 images belonging to 5 classes.\n","Found 259 images belonging to 5 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"id":"m91KD3XRHbai","executionInfo":{"status":"error","timestamp":1607477556785,"user_tz":300,"elapsed":376,"user":{"displayName":"bikkina rohith","photoUrl":"","userId":"00040099719680836834"}},"outputId":"07cc3d3b-1ad1-4914-aacb-b8a5f99409b5"},"source":[""],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-c0cb6617a7ee>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtraindata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtraindata\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mtraindata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'DirectoryIterator' and 'DirectoryIterator'"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jS-abPkcDvxM","executionInfo":{"status":"ok","timestamp":1607474662504,"user_tz":300,"elapsed":326,"user":{"displayName":"bikkina rohith","photoUrl":"","userId":"00040099719680836834"}},"outputId":"7d5f3884-3adc-4e50-edc2-87fd932d03a5"},"source":["print(traindata)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<tensorflow.python.keras.preprocessing.image.DirectoryIterator object at 0x7fbd5f0e0940>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LZU3HOl6M1IH"},"source":["model = Sequential()\n","model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9CLUCkykM9MU"},"source":["model.add(Flatten())\n","model.add(Dense(units=4096,activation=\"relu\"))\n","model.add(Dense(units=4096,activation=\"relu\"))\n","model.add(Dense(units=5, activation=\"softmax\"))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KOgKMRtxNAtP"},"source":["from keras.optimizers import Adam\n","opt = Adam(lr=0.001)\n","model.compile(optimizer=opt, loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c1WE5URLNEbD","executionInfo":{"status":"ok","timestamp":1607474686462,"user_tz":300,"elapsed":311,"user":{"displayName":"bikkina rohith","photoUrl":"","userId":"00040099719680836834"}},"outputId":"789e5859-aa25-4339-d9aa-51a8aaa1b916"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","conv2d_4 (Conv2D)            (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","conv2d_5 (Conv2D)            (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","conv2d_6 (Conv2D)            (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","conv2d_7 (Conv2D)            (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","conv2d_8 (Conv2D)            (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","conv2d_9 (Conv2D)            (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","max_pooling2d_3 (MaxPooling2 (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","conv2d_10 (Conv2D)           (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","conv2d_11 (Conv2D)           (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","conv2d_12 (Conv2D)           (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","max_pooling2d_4 (MaxPooling2 (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 25088)             0         \n","_________________________________________________________________\n","dense (Dense)                (None, 4096)              102764544 \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 4096)              16781312  \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 5)                 20485     \n","=================================================================\n","Total params: 134,281,029\n","Trainable params: 134,281,029\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Fq8LsZ1oNIj2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607475491558,"user_tz":300,"elapsed":27063,"user":{"displayName":"bikkina rohith","photoUrl":"","userId":"00040099719680836834"}},"outputId":"d293c4b8-b529-4975-9ec3-e036dc9da31a"},"source":["from keras.callbacks import ModelCheckpoint, EarlyStopping\n","checkpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n","early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n","hist = model.fit_generator(steps_per_epoch=12,generator=traindata, validation_data= testdata, validation_steps=13,epochs=5,callbacks=[checkpoint,early])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:`period` argument is deprecated. Please use `save_freq` to specify the frequency in number of batches seen.\n","Epoch 1/5\n"," 2/12 [====>.........................] - ETA: 1s - loss: 1.6078 - accuracy: 0.2407WARNING:tensorflow:Callbacks method `on_train_batch_end` is slow compared to the batch time (batch time: 0.1031s vs `on_train_batch_end` time: 0.2230s). Check your callbacks.\n","12/12 [==============================] - ETA: 0s - loss: 1.6291 - accuracy: 0.2273WARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 13 batches). You may need to use the repeat() function when building your dataset.\n","WARNING:tensorflow:Can save best model only with val_acc available, skipping.\n","WARNING:tensorflow:Early stopping conditioned on metric `val_acc` which is not available. Available metrics are: loss,accuracy,val_loss,val_accuracy\n","12/12 [==============================] - 6s 471ms/step - loss: 1.6291 - accuracy: 0.2273 - val_loss: 1.6153 - val_accuracy: 0.1622\n","Epoch 2/5\n","12/12 [==============================] - ETA: 0s - loss: 1.6076 - accuracy: 0.2500WARNING:tensorflow:Can save best model only with val_acc available, skipping.\n","WARNING:tensorflow:Early stopping conditioned on metric `val_acc` which is not available. Available metrics are: loss,accuracy\n","12/12 [==============================] - 5s 385ms/step - loss: 1.6076 - accuracy: 0.2500\n","Epoch 3/5\n","12/12 [==============================] - ETA: 0s - loss: 1.6098 - accuracy: 0.2109WARNING:tensorflow:Can save best model only with val_acc available, skipping.\n","WARNING:tensorflow:Early stopping conditioned on metric `val_acc` which is not available. Available metrics are: loss,accuracy\n","12/12 [==============================] - 5s 386ms/step - loss: 1.6098 - accuracy: 0.2109\n","Epoch 4/5\n","12/12 [==============================] - ETA: 0s - loss: 1.6126 - accuracy: 0.1979WARNING:tensorflow:Can save best model only with val_acc available, skipping.\n","WARNING:tensorflow:Early stopping conditioned on metric `val_acc` which is not available. Available metrics are: loss,accuracy\n","12/12 [==============================] - 5s 381ms/step - loss: 1.6126 - accuracy: 0.1979\n","Epoch 5/5\n","12/12 [==============================] - ETA: 0s - loss: 1.6089 - accuracy: 0.2166WARNING:tensorflow:Can save best model only with val_acc available, skipping.\n","WARNING:tensorflow:Early stopping conditioned on metric `val_acc` which is not available. Available metrics are: loss,accuracy\n","12/12 [==============================] - 5s 378ms/step - loss: 1.6089 - accuracy: 0.2166\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"fR_D7zsMSaQA","executionInfo":{"status":"error","timestamp":1612587344225,"user_tz":-330,"elapsed":2942,"user":{"displayName":"nikhitha bikkina","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjmEOKhmyum17MLeRKji4XApwtneP5eUn_BaGnF=s64","userId":"11128527617953766065"}},"outputId":"0375343a-769c-4cfc-f9ab-afdcd3c3aa31"},"source":["import matplotlib.pyplot as plt\n","plt.plot(hist.history[\"accuracy\"])\n","plt.plot(hist.history['val_accuracy'])\n","plt.plot(hist.history['loss'])\n","plt.plot(hist.history['val_loss'])\n","plt.title(\"model accuracy\")\n","plt.ylabel(\"Accuracy\")\n","plt.xlabel(\"Epoch\")\n","plt.legend([\"Accuracy\",\"Validation Accuracy\",\"loss\",\"Validation Loss\"])\n","plt.show()"],"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-e35be4fbfebd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"accuracy\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_accuracy'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'hist' is not defined"]}]}]}